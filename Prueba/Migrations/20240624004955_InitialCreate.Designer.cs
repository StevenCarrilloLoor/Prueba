// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prueba.Data;

#nullable disable

namespace Prueba.Migrations
{
    [DbContext(typeof(PruebaContext))]
    [Migration("20240624004955_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Prueba.Models.Alergia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistorialMedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Alergia");
                });

            modelBuilder.Entity("Prueba.Models.Condicion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistorialMedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Condicion");
                });

            modelBuilder.Entity("Prueba.Models.HistorialMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("HistorialMedico");
                });

            modelBuilder.Entity("Prueba.Models.Medicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistorialMedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Medicacion");
                });

            modelBuilder.Entity("Prueba.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DatosContacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("HistorialMedicoId");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Prueba.Models.Tratamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EfectosSecundarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrecuenciaAdministracion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstruccionesDosificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistorialMedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Tratamiento");
                });

            modelBuilder.Entity("Prueba.Models.Alergia", b =>
                {
                    b.HasOne("Prueba.Models.HistorialMedico", null)
                        .WithMany("Alergias")
                        .HasForeignKey("HistorialMedicoId");

                    b.HasOne("Prueba.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Prueba.Models.Condicion", b =>
                {
                    b.HasOne("Prueba.Models.HistorialMedico", null)
                        .WithMany("CondicionesPreexistentes")
                        .HasForeignKey("HistorialMedicoId");

                    b.HasOne("Prueba.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Prueba.Models.Medicacion", b =>
                {
                    b.HasOne("Prueba.Models.HistorialMedico", null)
                        .WithMany("MedicacionesActuales")
                        .HasForeignKey("HistorialMedicoId");

                    b.HasOne("Prueba.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Prueba.Models.Paciente", b =>
                {
                    b.HasOne("Prueba.Models.HistorialMedico", "HistorialMedico")
                        .WithMany()
                        .HasForeignKey("HistorialMedicoId");

                    b.Navigation("HistorialMedico");
                });

            modelBuilder.Entity("Prueba.Models.Tratamiento", b =>
                {
                    b.HasOne("Prueba.Models.HistorialMedico", null)
                        .WithMany("TratamientosAnteriores")
                        .HasForeignKey("HistorialMedicoId");

                    b.HasOne("Prueba.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Prueba.Models.HistorialMedico", b =>
                {
                    b.Navigation("Alergias");

                    b.Navigation("CondicionesPreexistentes");

                    b.Navigation("MedicacionesActuales");

                    b.Navigation("TratamientosAnteriores");
                });
#pragma warning restore 612, 618
        }
    }
}
